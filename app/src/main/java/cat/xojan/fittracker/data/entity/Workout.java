package cat.xojan.fittracker.data.entity;

import java.util.List;
import cat.xojan.fittracker.data.db.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import cat.xojan.fittracker.data.db.dao.TrackDao;
import cat.xojan.fittracker.data.db.dao.WorkoutDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "WORKOUT".
 */
public class Workout {

    private Long id;
    private String text;
    private Long workoutTime;
    private Long startTime;
    private Long endTime;
    private Long distance;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient WorkoutDao myDao;

    private List<Track> locations;

    public Workout() {
    }

    public Workout(Long id) {
        this.id = id;
    }

    public Workout(Long id, String text, Long workoutTime, Long startTime, Long endTime, Long distance) {
        this.id = id;
        this.text = text;
        this.workoutTime = workoutTime;
        this.startTime = startTime;
        this.endTime = endTime;
        this.distance = distance;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getWorkoutDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getText() {
        return text;
    }

    public void setText(String text) {
        this.text = text;
    }

    public Long getWorkoutTime() {
        return workoutTime;
    }

    public void setWorkoutTime(Long workoutTime) {
        this.workoutTime = workoutTime;
    }

    public Long getStartTime() {
        return startTime;
    }

    public void setStartTime(Long startTime) {
        this.startTime = startTime;
    }

    public Long getEndTime() {
        return endTime;
    }

    public void setEndTime(Long endTime) {
        this.endTime = endTime;
    }

    public Long getDistance() {
        return distance;
    }

    public void setDistance(Long distance) {
        this.distance = distance;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Track> getLocations() {
        if (locations == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            TrackDao targetDao = daoSession.getTrackDao();
            List<Track> locationsNew = targetDao._queryWorkout_Locations(id);
            synchronized (this) {
                if(locations == null) {
                    locations = locationsNew;
                }
            }
        }
        return locations;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetLocations() {
        locations = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
