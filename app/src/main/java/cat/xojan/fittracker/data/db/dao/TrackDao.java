package cat.xojan.fittracker.data.db.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import cat.xojan.fittracker.data.entity.Track;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LOCATIONS".
*/
public class TrackDao extends AbstractDao<Track, Long> {

    public static final String TABLENAME = "LOCATIONS";

    /**
     * Properties of entity Track.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Longitude = new Property(1, Double.class, "longitude", false, "LONGITUDE");
        public final static Property Lattitude = new Property(2, Double.class, "lattitude", false, "LATTITUDE");
        public final static Property Date = new Property(3, java.util.Date.class, "date", false, "DATE");
        public final static Property WorkoutId = new Property(4, long.class, "workoutId", false, "WORKOUT_ID");
    };

    private Query<Track> workout_LocationsQuery;

    public TrackDao(DaoConfig config) {
        super(config);
    }
    
    public TrackDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LOCATIONS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"LONGITUDE\" REAL," + // 1: longitude
                "\"LATTITUDE\" REAL," + // 2: lattitude
                "\"DATE\" INTEGER," + // 3: date
                "\"WORKOUT_ID\" INTEGER NOT NULL );"); // 4: workoutId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LOCATIONS\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Track entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Double longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindDouble(2, longitude);
        }
 
        Double lattitude = entity.getLattitude();
        if (lattitude != null) {
            stmt.bindDouble(3, lattitude);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(4, date.getTime());
        }
        stmt.bindLong(5, entity.getWorkoutId());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Track readEntity(Cursor cursor, int offset) {
        Track entity = new Track( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getDouble(offset + 1), // longitude
            cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2), // lattitude
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // date
            cursor.getLong(offset + 4) // workoutId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Track entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLongitude(cursor.isNull(offset + 1) ? null : cursor.getDouble(offset + 1));
        entity.setLattitude(cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2));
        entity.setDate(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setWorkoutId(cursor.getLong(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Track entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Track entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "locations" to-many relationship of Workout. */
    public List<Track> _queryWorkout_Locations(long workoutId) {
        synchronized (this) {
            if (workout_LocationsQuery == null) {
                QueryBuilder<Track> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.WorkoutId.eq(null));
                queryBuilder.orderRaw("T.'DATE' ASC");
                workout_LocationsQuery = queryBuilder.build();
            }
        }
        Query<Track> query = workout_LocationsQuery.forCurrentThread();
        query.setParameter(0, workoutId);
        return query.list();
    }

}
