package cat.xojan.fittracker.data.db.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import cat.xojan.fittracker.data.entity.Workout;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WORKOUT".
*/
public class WorkoutDao extends AbstractDao<Workout, Long> {

    public static final String TABLENAME = "WORKOUT";

    /**
     * Properties of entity Workout.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property WorkoutTime = new Property(2, Long.class, "workoutTime", false, "WORKOUT_TIME");
        public final static Property StartTime = new Property(3, Long.class, "startTime", false, "START_TIME");
        public final static Property EndTime = new Property(4, Long.class, "endTime", false, "END_TIME");
        public final static Property Distance = new Property(5, Long.class, "distance", false, "DISTANCE");
        public final static Property Type = new Property(6, String.class, "type", false, "TYPE");
    };

    private DaoSession daoSession;


    public WorkoutDao(DaoConfig config) {
        super(config);
    }
    
    public WorkoutDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WORKOUT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"TITLE\" TEXT," + // 1: title
                "\"WORKOUT_TIME\" INTEGER," + // 2: workoutTime
                "\"START_TIME\" INTEGER," + // 3: startTime
                "\"END_TIME\" INTEGER," + // 4: endTime
                "\"DISTANCE\" INTEGER," + // 5: distance
                "\"TYPE\" TEXT);"); // 6: type
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WORKOUT\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Workout entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        Long workoutTime = entity.getWorkoutTime();
        if (workoutTime != null) {
            stmt.bindLong(3, workoutTime);
        }
 
        Long startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindLong(4, startTime);
        }
 
        Long endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindLong(5, endTime);
        }
 
        Long distance = entity.getDistance();
        if (distance != null) {
            stmt.bindLong(6, distance);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(7, type);
        }
    }

    @Override
    protected void attachEntity(Workout entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Workout readEntity(Cursor cursor, int offset) {
        Workout entity = new Workout( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // workoutTime
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // startTime
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // endTime
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // distance
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6) // type
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Workout entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setWorkoutTime(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setStartTime(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setEndTime(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setDistance(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setType(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Workout entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Workout entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
